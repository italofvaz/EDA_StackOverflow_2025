# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18T2Ipd3R6Homw1fllGDSHTFEvqYWx3Jz
"""

import pandas as pd
import re
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

sns.set()
sns.set_context('poster')

df = pd.read_csv('/content/survey_results_public.csv', index_col='ResponseId')

df.columns

df_schema = pd.read_csv('/content/survey_results_schema.csv', index_col='qid')

df_schema

#limpando o arquivo que possue trechos de HTML

def remove_html (html):
  pattern = re.compile('<.*?>')
  cleantext = re.sub(pattern, '', html)
  return cleantext.replace('*', '').strip()

for name , description in zip (df_schema['qname'], df_schema['question']):
  print(f'{name} : {remove_html(description)}')

df.info()

def percent (value):
  return f'{100 * value:.2f}%'

#descobrindo dados nulos na base, e tabalhando com eles

#quantidade de valores nulos por coluna
df.isna().sum()

#porcentagem de valores nulos por coluna

(df.isna().sum() / len(df)).sort_values(ascending=False).apply(percent)

#analise grafica dos valores nulos

percent_data = (df.isna().sum() / len(df)).sort_values(ascending=False).apply(percent).reset_index()

percent_data.columns = ['column_name','percent']
percent_data

fig, ax = plt.subplots(figsize=(18,9))

sns.barplot(data=percent_data, x='column_name', y='percent', ax=ax)
fig.suptitle('% null data')
plt.xticks(rotation=80)
ax.set_ylim(0, 100)


# Formatando os rótulos do eixo Y como porcentagem
ax.set_yticks(range(0, 110, 10))  # Define os ticks a cada 10%
ax.set_yticklabels([f"{tick}%" for tick in ax.get_yticks()])


plt.show()

# Encontrando os dados numericos

df.select_dtypes('number')

df[['WorkExp', 'ConvertedCompYearly']].describe().round(2)

#dados nao numericos

df.select_dtypes('object')

df['RemoteWork'].value_counts(normalize=True, dropna=False)

df['RemoteWork'].unique()

df[['Age', 'RemoteWork']].value_counts().sort_index()

#analise grafica

df['WorkExp'].describe()

fig, ax = plt.subplots(figsize=(22,8))

sns.boxplot(data=df, x='WorkExp')
fig.suptitle('Work Eperience Time')

plt.show()

#visualizar os valores reais de cada resposta

ax_noise = np.random.uniform(-0.1, 0.1, len(df))

x_scatter = df['WorkExp'] + ax_noise

y_scatter = np.random.uniform(-0.3, 0.3, len(df))

fig, ax=plt.subplots(figsize=(22,8))

sns.scatterplot(data=df,  ax=ax, x=x_scatter, y=y_scatter, alpha=0.8, s=20)
sns.boxplot(data=df, ax=ax, x='WorkExp')

fig.suptitle('Work Experience Time')

plt.show()

fig, ax=plt.subplots(figsize=(12,5))

sns.histplot(data=df, x='WorkExp', ax=ax, kde=True)
fig.suptitle('time experience')

plt.show()

df['WorkExp'].value_counts()

df['Age'].value_counts(normalize=True, dropna=True).apply(lambda x: f'{100 * x:.2f}%')

df['Age'].unique()

mapa_idade = {
    'Under 18 years old' : '[00 - 18]',
    '18-24 years old' : '[18 - 24]',
    '25-34 years old' : '[25 - 34]',
    '35-44 years old' : '[35 - 44]',
    '45-54 years old' : '[45 - 54]',
    '55-64 years old' : '[55 - 64]',
    '65 years or older' : '[65 - 99]',
    'Prefer not to say' : '[??]',
    np.NaN : '[??]'

}

df['Age_new'] = df['Age'].map(mapa_idade)

df2 = df.loc[df['Age_new'] != '[??]']

df2['Age_new'].value_counts(dropna=False).sort_index()

fig, ax = plt.subplots(figsize=(20,8))

idade = sorted(df2['Age_new'].unique())

sns.histplot(data=df2 , ax=ax, hue='Age_new', x='WorkExp', binwidth=1.0, hue_order=idade)
fig.suptitle('Age Range Work Experience')


plt.show()

fig, ax=plt.subplots(figsize=(20,8))

sns.histplot(data=df, x='RemoteWork', binwidth=1.0,)
plt.show()

#correlacao das variaveis

x = np.linspace(0, 10, 100)
y_random = np.random.uniform(-1,1,100)

y_corr = x*2+y_random

fig, (ax_left, ax_right) = plt.subplots(figsize=(20,8), ncols=2)

sns.scatterplot(x=x, ax=ax_left, y=y_corr)
ax_left.set_title('Correlation')

sns.scatterplot(ax=ax_right, x=x, y=y_random)
ax_right.set_title('Bad Correlation')

fig.suptitle('Correlations')
plt.show()

#correlacao do salario com o tempo de trabalho

#a existencia de um valor muito alto chama a atencao de erros nos dados, dessa forma é necessario tratar os dados para uma melhor visualizacao

df_filter = df.loc[df['ConvertedCompYearly'] <= 500_000]

fig, ax=plt.subplots(figsize=(20,6))

sns.scatterplot(data=df_filter, x='WorkExp', y='ConvertedCompYearly')
fig.suptitle('Correlation of work experience and salary')

plt.show()

cut = 300_000

df_up = df_filter.loc[df_filter['ConvertedCompYearly'] > cut ]
df_down = df_filter.loc[df_filter['ConvertedCompYearly'] <= cut]

fig, (ax_up, ax_down) = plt.subplots(figsize=(20,6), ncols=2)

sns.scatterplot(data=df_up, x='WorkExp', y='ConvertedCompYearly', ax=ax_up)
sns.scatterplot(data=df_down, x='WorkExp', y='ConvertedCompYearly', ax=ax_down)

fig.suptitle('Correlations')

df_up[['WorkExp', 'ConvertedCompYearly']].corr()

df_down[['WorkExp', 'ConvertedCompYearly']].corr()

# A correlacao do salario com o tempo de trabalho é maior com salarios menores que 300k por ano

fig, (ax_up, ax_down) = plt.subplots(figsize=(20,6), ncols=2)

sns.histplot(data=df_up, x='WorkExp', y='ConvertedCompYearly', ax=ax_up, discrete=(True, False))
sns.histplot(data=df_down, x='WorkExp', y='ConvertedCompYearly', ax=ax_down, discrete=(True, False))

fig.suptitle('Correlations')

countrys = ['United States of America', 'Germany', 'Brazil', 'South Africa', 'India', 'Australia']

df_paises = df_filter.loc[df_filter['Country'].isin(countrys)]

df_paises['Country'].value_counts()

sns.relplot(data=df_paises, x='WorkExp', y='ConvertedCompYearly', hue='Country', col='Country', col_wrap=3,)

df_paises[['WorkExp', 'ConvertedCompYearly', 'Country']].groupby('Country').corr()